Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.


      Brute force approach
         vector<int> prefixSum(nums.size(), 0);
         prefixSum[0]=nums[0];
         int leftIndex=INT_MAX;

         for(int i=1; i<nums.size(); i++){
              prefixSum[i]=prefixSum[i-1]+nums[i];

         }
         int backSum=0;
         for(int i=nums.size()-1; i>=0; i--){
             backSum+=nums[i];
             if(backSum==prefixSum[i]){
             leftIndex=min(leftIndex, i);
             }

         }

      
         return leftIndex==INT_MAX ? -1 : leftIndex;


    Optimized approach: 

    Algo:
Step_#1:

Let
Left hand side be empty, and
Right hand side holds all weights.


Step_#2:

Iterate weight_i from 0 to (n-1)

During each iteration, take away weight_#i from right hand side, check whether balance is met or not.

If yes, then the index i is the pivot index.

If no, put weight_#i on the left hand side, and repeat the process until balance is met or all weights are exchanged.


Step_#3:

Finally, if all weights are exchanged and no balance is met, then pivot index does not exist, return -1.


     int totalWeightOnRight=accumulate(nums.begin(), nums.end(), 0);
         int totalWeightOnLeft=0;
         for(int i=0; i<nums.size(); i++){
             int currentWeight=nums[i];
             totalWeightOnRight-=currentWeight;
             if(totalWeightOnRight==totalWeightOnLeft){
                 return i;
             }

             totalWeightOnLeft+=currentWeight;
         }

         return -1;

TC: O(n) SC: O(1)




