Count total subarrays with equal number of 0s and 1s


Brute force:


class Solution{
  public:
    //Function to count subarrays with 1s and 0s.
    long long int countSubarrWithEqualZeroAndOne(int arr[], int n)
    {
        //Your code here
        long long length=0;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                long long zeroCount=0;
                long long oneCount=0;
                for(int k=i; k<=j; k++){
                    if(arr[k]==0){
                        zeroCount++;
                    }
                    else{
                        oneCount++;
                    }
                    
                }
                    if(zeroCount==oneCount){
                        length++;
                    }
                
            }
        }
        
        return length;
    }
};


Efficient solution:
Using Hashing



class Solution{
  public:
    //Function to count subarrays with 1s and 0s.
    long long int countSubarrWithEqualZeroAndOne(int arr[], int n)
    {
        //Your code here
        unordered_map<int, int> mpp;
        mpp[0]=1;
        long long frequency=0;
        int sum=0;
        for(int i=0; i<n; i++){
            sum=sum+(arr[i]==1 ? 1 : -1);
            
            if(mpp.find(sum)!=mpp.end()){
                 frequency+=mpp[sum]; 
            }
            
            mpp[sum]++;
        }
        
        return frequency;
    }
    
    
};

Algroithm:
1. Create a hash table with key as sum and value as frequency of that sum.
2. Initialize sum=0 and frequency=0.
3. Traverse the array and for every element in the array, do the following:
    1. If the element is 0, then decrease the sum by 1.
    2. Else, increase the sum by 1.
    3. If the sum is 0, then increment the frequency by 1.
    4. If the sum already exists in the hash table, then increment the frequency by the value of that sum in the hash table.
    5. Increment the value of sum in the hash table by 1.
4. Return the value of frequency.

TC: O(n)
SC: O(n)


Intuition:
1. If the intial sum of some part is k, and then if we encouter the same sum later, that means the sum of the elements in between is 0.

k(sum)  (equal number of 0s and 1s)
                                 k(sum)