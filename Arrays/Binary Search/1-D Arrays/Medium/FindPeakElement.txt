A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.



class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        // brute force approach
        // int maxElement=max_element(nums.begin(), nums.end())-nums.begin();
        // return maxElement;



        
     if(nums.size()==1) return 0;
     if(nums[0]>nums[1]) return 0;
     if(nums[nums.size()-1]>nums[nums.size()-2]) return nums.size()-1;

    int low=0, high=nums.size()-1;

        while(low<=high){
            long long mid=(low+high)/2;
          

            if(nums[mid]>nums[mid+1] and nums[mid]>nums[mid-1]){
                return mid;
            }
            if(nums[low]>=nums[mid] or nums[mid-1]>nums[mid]){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        

       

        }


      

        return low+1;

    }
};