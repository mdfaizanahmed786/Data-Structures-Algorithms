Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.


class Solution {
    public:
    long long calculateHours(vector<int> piles, int banana){
        long long total=0;
        for(int i=0; i<piles.size(); i++){
            double result=((double)piles[i]/banana);
              total+=ceil(result);
        }

        return total;

    }
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int maxBanana=*max_element(piles.begin(), piles.end());
    
        int low=1, high=maxBanana;
        int lessTime;
        while(low<=high){
            long long mid=low+(high-low)/2;
        
            if(calculateHours(piles, mid)<=h){
                lessTime=mid;
                high=mid-1;
                
            }
            else if(calculateHours(piles, mid)>h){
                low=mid+1;
            }
            
        }

      return lessTime;

    }
};

TC: O(n*log(maxElement))
SC: O(1)


Algoritm:
1. Find the max element in the array.
2. Apply binary search on the range 1 to max element.
3. For each mid, calculate the total hours required to eat all the bananas.
4. If the total hours is less than or equal to h, then store the mid in lessTime and search for the minimum mid.
5. If the total hours is greater than h, then search for the higher mid.
6. Return the lessTime.
