A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

 

Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.



Code:

class Solution {
    public:
    int getMinimumDays(vector<int> w, int capacity){
        int i=0, j=0;
        long long sum=0;
        int count=0;
    
        while(i<w.size() && j<w.size()){
            sum+=w[j];
            if(sum<=capacity){
                j++;
            }
            else{
                sum=0;
                i=j;
                j=i;
                count++;
            }
        }
      
        return count+1;
      
    }

public:
    int shipWithinDays(vector<int>& w, int days) {
        int minNo=*max_element(w.begin(), w.end());
        long long sum=0;
        for(auto it: w) sum+=it;
        int low=minNo, high=sum;
        int ans=-1;
        while(low<=high){
            long long mid=(low+high)/2;
            if(getMinimumDays(w, mid)<=days){
                ans=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
};



Alogrithm of the above code:
 
2. We find the maximum capacity of the ship, which is the sum of all the values of the weight array. The ship cannot have a capacity greater than this value. 
3. We take low as the minimum capacity of the ship and high as the maximum capacity of the ship. 
4. We find the mid of the low and high and calculate the number of days required to transport all the weights using the function getMinimumDays. 
5. If the number of days required to transport all the weights are less than days, we update the ans with the mid and search for a better answer on the left side of the array. 
6. If the number of days required to transport all the weights are greater than days, we search for a better answer on the right side of the array. 
7. We return the ans as the answer. 
8. The function getMinimumDays returns the minimum number of days required to transport all the weights with a ship with capacity equal to the mid. 
9. We take two pointers i and j and initialize them to 0.
10. We take a variable sum and initialize it to 0.
11. We iterate until i and j are less than the size of the array.
12. We add the value of the weight at index j to the sum.
13. If the sum is less than or equal to the capacity of the ship, we increment j by 1.
14. If the sum is greater than the capacity of the ship, we increment the count by 1 and set the value of i and j to j.
15. We return the count + 1 as the answer.
