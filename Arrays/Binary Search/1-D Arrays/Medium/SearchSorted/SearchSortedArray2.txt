
There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.




class Solution {
public:
    bool search(vector<int>& nums, int target) {
        // applying linear search
        for(int i=0; i<nums.size(); i++){
            if(nums[i]==target){
                return true;
            }
        }

 int low=0, high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                return true;
            }
// Here we have duplicates, so if we have 3 3 1 3 3 3 3
// In above example, arr[mid], arr[high] and arr[low] are equal and if they are not equal to target, there is no use of checking so we increment low and high pointer, and still continue if we find the same.

if(nums[low]==nums[mid] && nums[mid]==nums[high]){
    low=low+1;
    high=high-1;
    continue;
}

 






 // checking for if left part is sorted or not
            if(nums[mid]>=nums[low]){
                // if left part is sorted, then check whether the target lies in the left part, if it lies move high pointer
                if(nums[low]<=target && nums[mid]>=target){
                    high=mid-1;
                }
//  if it does not lie, increment low pointer.
                else{
                    low=mid+1;
                }
            }

// if right part is sorted
            else{
                // if right part is sorted, then check whether the target lies in the right part, if it lies move low pointer
                 if(nums[high]>=target && nums[mid]<=target){
                   low=mid+1;
                }
                //   if it does not lie, increment high pointer.

                else{
                    high=mid-1;
                }
            }
        }

        return false;
        

        
    }
};

TC: O(logn), average case
Now, if we have duplicates, then we have to check for all the elements, so worst case is O(n/2) we are shrinking the array by half, so TC: O(n/2) = O(n) (if we have lot of duplicates...)
SC: O(1)