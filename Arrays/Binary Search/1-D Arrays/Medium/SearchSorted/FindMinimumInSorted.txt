

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.
















class Solution {
public:
    int findMin(vector<int>& nums) {
        // int minElement=*min_element(nums.begin(), nums.end());
        // return minElement;
        int count=0;

        int minElement=INT_MAX;

        int low=0, high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]<=nums[low]){
               minElement=min(minElement, nums[mid]);
                 count++;
                  if(mid>0 && mid<nums.size()-1){
                if(nums[mid]<nums[mid-1] || nums[mid]>nums[mid+1]){
                    low=mid+1;
                   
                }
                else{
                    high=mid-1;
                }

                }
                else{
                      minElement=min(minElement, nums[mid]);
                      low=low+1;
                }
            }

            else{
                minElement=min(minElement, nums[low]);
                 count++;
                low=mid+1;
            }
        }

cout<<count;
        return minElement;
    }
};