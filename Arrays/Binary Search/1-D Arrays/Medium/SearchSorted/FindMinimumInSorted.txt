

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.


class Solution {
public:
    int findMin(vector<int>& nums) {
        // int minElement=*min_element(nums.begin(), nums.end());
        // return minElement;


          int low=0, high=nums.size()-1;
        int ans=INT_MAX;
        while(low<=high){
            int mid=(low+high)/2;
            // first checking for sorted part, if they are sorted, then pick for the minimum number from it and then elimnate that part.
            if(nums[mid]<=nums[high]){
                ans=min(ans, nums[mid]);
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
    }

    TC: O(logn) Worst: O(n/2) if it contains duplicates
