There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.








class Solution {
public:
    int search(vector<int>& nums, int target) {
        // brute force(without using binary search, will be using binary search)
        // for(int i=0; i<nums.size(); i++){
        //     if(nums[i]==target) return i;
        // }
        // return -1;









        

        // Using binary search
        // TC: O(logn) SC: O(1)

        int low=0, high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                return mid;
            }
            // checking for if left part is sorted or not
            if(nums[mid]>=nums[low]){
                // if left part is sorted, then check whether the target lies in the left part, if it lies move high pointer
                if(nums[low]<=target && nums[mid]>=target){
                    high=mid-1;
                }
//  if it does not lie, increment low pointer.
                else{
                    low=mid+1;
                }
            }

// if right part is sorted
            else{
                // if right part is sorted, then check whether the target lies in the right part, if it lies move low pointer
                 if(nums[high]>=target && nums[mid]<=target){
                   low=mid+1;
                }
                //   if it does not lie, increment high pointer.

                else{
                    high=mid-1;
                }
            }
        }

        return -1;
    }
};