Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.



class Solution {
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        vector<int> oneD;
        vector<vector<int>> ans;
        int n=grid.size();
        int m=grid[0].size();

        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[i].size(); j++){
                oneD.push_back(grid[i][j]);
            }
        }
     

        reverse(oneD.begin(), oneD.end());
        reverse(oneD.begin(), oneD.begin()+ k % (n * m));
        reverse(oneD.begin()+ k % (n * m), oneD.end());
         
        int index=0;
        for(int i=0; i<n; i++){
            vector<int> row;
            for(int j=0; j<m; j++){
                row.push_back(oneD[index]);
                index++;
            }
            ans.push_back(row);
        }






return ans;


    }
};