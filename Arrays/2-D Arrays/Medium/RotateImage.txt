  You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.      
        



        Brute: 
        int rows=matrix.size();
        int cols=matrix[0].size();
         vector<vector<int>> ans(rows, vector<int>(cols, 0));
         for(int i=0; i<rows; i++){
             for(int j=0; j<cols; j++){
                 ans[j][rows-i-1]=matrix[i][j];
             }
         }

         matrix=ans;


         Optimal (inplace): TC:O(n/2*n/2) for transpose and reverse: O(n*n/2);
         total TC: O(n*n) SC:O(1)

         Another method is take transpose and reverse each row again.
         
         for(int i=0; i<rows-1; i++){
                for i=0, j will move from i+1 to n-1


              [0][1]-->[1][0]
              [0][2]-->[2][0]
              [0][3]-->[3][0]

             [1][2] --> [2][1]
             [1][3] --> [3][1]

             [2][3] --> [3][2]

             for(int j=i+1; j<cols; j++){
                  swap(matrix[i][j], matrix[j][i]);
             }
         }

    for (int i = 0; i < rows; i++) {
    reverse(matrix[i].begin(), matrix[i].end());

    }