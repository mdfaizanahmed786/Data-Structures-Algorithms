Given an array, sort array using insertion sort


Appraoach:
1. First fetch the element
2. Compare the element with the previous element
3. If the previous element is greater than the current element, then move the previous element to the right side and move the current element to the previous position. or shift the element to the right side.
4. If the previous element is smaller than the current element, then break the loop.
5. Copy the current element to the previous position.

for(int i=1; i<n; i++){
     storing the curent position of an element in temp variable.
    int value=arr[i];
    int j=i-1;
    for(; j>=0; j--){
         if the previous element is greater than the current element then move that previous element to the right side and move that current element to the previous position.
      if(arr[j]>value){
          arr[j+1]=arr[j];
      }
       if the element is already in a correct position we get out of the damn loop.
      else{
          break;
      }
    }
     Now, here's the tricky part, when comparing j might have moved a postion extra to left side, hence we need to equate that value to current temp value.
     1 7 10 8: while comparing, 8 with 10, j has moved left and again it has moved left at position 7 is present hence we need to move 10 not 7, hence j+1 equal to i.
    arr[j+1]=value;
}

TC: O(n^2)
SC: O(1)


Best case: O(n) (if the array is already sorted)
