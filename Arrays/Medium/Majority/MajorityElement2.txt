You are given an array, you need to find elements which are greater that n/3 times in the array.


Brute: Just iterate in an array and check if the element is greater than n/3 times. O(n^2)
But you need to check wheter the number is already present or not in an array, by this condition:
ans.size()==0 || ans[0]!=nums[i]


   TC: O(N^2) SC:O(1) as we are storing only two elements constant space
           for(int i=0; i<nums.size();i++){
            to insert element, if it is not present from back to check
               if(ans.size()==0 || ans[0]!=nums[i]){
                  int count=0;
              
               for(int j=0; j<nums.size(); j++){
                  if(nums[i]==nums[j]){
                      count++;
                  }
               }
               if(count>majorityCount){
                   ans.push_back(nums[i]);
               }
               if(ans.size()==2) break;
           }
           }

Better: Using hashmap

 TC: O(nlogm)
 SC: O(m)+O(1)
         unordered_map<int, int> mpp;
         for(int i=0; i<nums.size(); i++){
             mpp[nums[i]]++;
             using only iteration
             if(mpp[nums[i]]==majorityCount+1){
                 ans.push_back(nums[i]);
             }
             
         }

Optimal: Moore's Voting Algorithm(similar to of n/2 elements occurence)




 int el1=INT_MIN, el2=INT_MIN;
  int ct1=0, ct2=0;
   Why we are only taking only two elements, because at max only two elements will have frequencey greater than n/3; and we need to ensure that el1 is not equal to el2 and this approach is derived from moores voting algo from n/2;

  for(int i=0; i<nums.size(); i++){
      if(ct1==0 && nums[i]!=el2){
          el1=nums[i];
          ct1=1;
      }

      else if(ct2==0 && nums[i]!=el1){
          el2=nums[i];
          ct2=1;
      }

      else if(el1==nums[i]){
          ct1++;
      }
      else if(el2==nums[i]){
          ct2++;
      }
      else{
          ct1--; 
          ct2--;
      }
  }


ct1=0, ct2=0;

for(int i=0; i<nums.size(); i++){
    if(el1==nums[i]){
        ct1++;
    }
    else if(el2==nums[i]){
        ct2++;
    }
}

if(ct1>majorityCount){
    ans.push_back(el1);
}
if(ct2>majorityCount){
    ans.push_back(el2);
}


return ans;