class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
     
      
       Brute force approach
      int count=0;
       for(int i=0; i<nums.size(); i++){
            int count=0;

            for(int j=i; j<nums.size(); j++){
              int sum=0;
              for(int k=i; k<=j; k++){
                 sum+=nums[k];
              }
              if(sum==k){
                count++;
                
              }
            }

       }

       Better solution
      for(int i=0; i<nums.size(); i++){
            int count=0;
            int sum=0;

            for(int j=i; j<nums.size(); j++){
             sum+=nums[j];
            
                 if(sum==k){
                count++;
               
              }
            }

       }
      
     using prefix sum concept

    map<int, int> mpp;

    mpp[0]=1;
    int prefixSum=0;

    for(int i=0;i<nums.size(); i++){
    prefixSum+=nums[i];
    int remaining=prefixSum-k;
    count+=mpp[remaining];
    mpp[prefixSum]++;
   



    }





      return count;
    }
};



BRUTE: O(n^3)
BETTER: O(n^2)
https://leetcode.com/problems/subarray-sum-equals-k/description/
OPTIMAL: O(n LOGN(FOR MAP) OR O(N) FOR UNORDERED MAP)