Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".





class Solution {
    // public:
    // bool checkPalindrome(string s, int start, int end){
    //     while(start<=end){
    //         if(s[start]!=s[end]){
    //             return false;
    //         }
    //         start++;
    //         end--;
    //     }

    //     return true;
    // }
    public:
    int checkEvenAndOddLength(string s, int start, int end){
      int count=0;
      while(start>=0 && end<s.size() && s[start]==s[end]){
          count++;
          start--;
          end++;
          
      }
      return count;
    }
       
public:
    int countSubstrings(string s) {
        int count=0;
        // TC: O(n^3 (nearly))
        // for(int i=0; i<s.size(); i++){
        //     for(int j=i; j<s.size(); j++){
        //         if(checkPalindrome(s, i, j)){
        //             count++;
        //         }
        //     }
        // }


        // applying two pointer approach
        // determining even odd length..


          TC: O(n^2) SC: O(1)
        for(int i=0; i<s.size(); i++){
            // checking for odd part, first 1, then 3, 5 and so on..
           count=count+checkEvenAndOddLength(s, i, i);
        //    checking for even part, first 2, next 4, next 6 and so on..

         count=count+checkEvenAndOddLength(s, i, i+1);
        }

        
        return count;
    }
};