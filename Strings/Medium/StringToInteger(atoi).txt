Input: s = "42"
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
The parsed integer is 42.
Since 42 is in the range [-231, 231 - 1], the final result is 42.
Example 2:

Input: s = "   -42"
Output: -42
Explanation:
Step 1: "   -42" (leading whitespace is read and ignored)
            ^
Step 2: "   -42" ('-' is read, so the result should be negative)
             ^
Step 3: "   -42" ("42" is read in)




class Solution {
public:
    int myAtoi(string s) {
        int i=0, sign=1, ans=0;
// if there exists empty spaces skip them
        while(s[i]==' '){
            i++;
        }
// if they contain any operation at start, consider them
        if(i<s.size() && (s[i]=='+' || s[i]=='-')){
            sign=s[i]=='-' ? -1 : 1;
            i++;
        }
// 2147483647
// 214748364 (only till 0 to 7 are allowed)

// if they are digit then add them in the answer
        while(i<s.size() && isdigit(s[i])){
           if(ans>(INT_MAX)/10 || (ans==(INT_MAX)/10 && s[i]>'7')){
               return sign==-1 ? INT_MIN : INT_MAX;
           }

            ans=ans*10+(s[i]-'0');
            i++;
        }

// return the answer with sign, if none of the cases satisfy, we can return answer as zero strightforward.
        return ans*sign;
    }
};

TC: O(n)
SC: O(1)